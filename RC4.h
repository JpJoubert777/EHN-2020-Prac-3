/**
 * @brief struct containing the rc4 context
 */
typedef struct
{
	unsigned char S[256];
	int i;
	int j;
} rc4ctx_t;


/**
 * @brief Initializes rc4 struct
 * 
 * @param rc4c the rc4 struct variable
 * @param key the key
 * @param keylen the length of the key in bytes
 * @return void
 */
void rc4_init(rc4ctx_t* rc4c, unsigned char * key, int keylen);
/**
 * @brief returns the next byte from the rc4 context
 * 
 * @param rc4c the rc4 context
 * @return unsigned char
 */
unsigned char rc4_getByte(rc4ctx_t* rc4c);
/**
 * @brief generates a stream of rc4-generated bytes from the rc4 context
 * 
 * @param RC4Stream the variable to store the stream
 * @param numBytes the amount of bytes required for the stream
 * @param rc4Context the rc4 context
 * @return void
 */
void generateStream(unsigned char * RC4Stream, int numBytes,rc4ctx_t* rc4Context);
/**
 * @brief performs rc4 encryption
 * 
 * @param plainText the variable containing the plaintext
 * @param cypherText the variable that will store the cyphertext
 * @param numPlaintextBytes the amount of bytes in the plaintext
 * @param key the key
 * @param keyLength the length of the key in bytes
 * @return void
 */
void RC4Encrypt(unsigned char * plainText,unsigned char * cypherText,int numPlaintextBytes, unsigned char * key, int keyLength);
/**
 * @brief performs rc4 decryption
 * 
 * @param plainText the variable that will store the plaintext
 * @param cypherText the variable containing the cyphertext
 * @param numPlaintextBytes the amount of bytes in the plaintext
 * @param key the key
 * @param keyLength the length of the key in bytes
 * @return void
 */
void RC4Decrypt(unsigned char * plainText,unsigned char * cypherText,int numPlaintextBytes, unsigned char * key, int keyLength);

int main(int argc, char* argv[]);

void printError();

void padZeroes(unsigned char * key, int keylen);

#include <gmp.h>
/**
 * @brief struct containing the RSA context
 */
typedef struct
{
	mpz_t p;
	mpz_t q;
	mpz_t n;
	mpz_t sigma;
	mpz_t e;
	mpz_t d;
	
} rsactx_t;

/**
 * @brief global struct variable
 */
rsactx_t rsaContext;

/**
 * @brief initializes the rsa struct
 * 
 * @param rsactx the rsa struct variable
 * @return void
 */
void rsa_init(rsactx_t * rsactx);
/**
 * @brief clears the rsa struct
 * 
 * @param rsactx the rsa struct variable
 * @return void
 */
void rsa_clear(rsactx_t * rsactx);
/**
 * @brief adds zero padding to a key of up to 16 bytes in length
 * 
 * @param key the key to be padded
 * @param keylen the actual number of bytes in the key
 * @return void
 */
void padZeroes(unsigned char * key, int keylen);
/**
 * @brief seeds the rsa struct with a key
 * 
 * @param key the RNG key
 * @param keylen the length of the RNG key
 * @return void
 */
void rseed(unsigned char * key, int keylen);
/**
 * @brief generates the next randomly generated byte from the rc4 context
 * 
 * @return void
 */
unsigned char rrand();
/**
 * @brief returns a prime number of bits length
 * 
 * @param p
 * @param bits
 * @return void
 */
void getprime(mpz_t p,int bits);
/**
 * @brief generates the RSA paramaters: p, q, n, sigma, d, e
 * 
 * @param RNGkey the key for the rng
 * @param RNGkeyLength the actual length of the rng key
 * @param numNeededRSAKeyBits the number of desired bits for the public and private keys
 * @return void
 */
void generateKeyRSA(unsigned char * RNGkey,int RNGkeyLength,int numNeededRSAKeyBits);
